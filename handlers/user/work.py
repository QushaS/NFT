from loader import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram import types

from keyboards import get_worker_menu, get_mamonts_menu, setting_mamont_menu
from utils.database import get_mamonts, get_workers, get_users, create_promo_db, get_promocodes, add_mamont_db, add_worker, get_user, set_mamont_balance_db, set_mamont_verif, set_mamont_vivod, del_mamont_db

from states import StorageCreatePromo, StorageAddMamonts, StorageBalanceMamont

@dp.message_handler(text=['‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞', '–†–ê–ë–æ—Ç–Ω–∏–∫'])
async def worker(message: types.Message, state:FSMContext):
    add_worker(message.from_id)
    await state.finish()
    me = await bot.get_me()
    await message.answer(f'‚ö°Ô∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞:\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —Ñ–µ–π–∫ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞:\n‚îú –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –ö–∞—Ä—Ç–∞: 5469440017276685\n‚îú –ù–æ–º–µ—Ä QIWI: 79264409426\n‚îú –ÆMoney: 411037454376341\n‚îú WebMoney: R207033756796\n‚îú Ethereum: 0x4675c7e5baafbffbca748158becba61ef3b0a263\n‚îú USDT TRC20: TQQraDH83vbw9Zu9HsLjNtdcRkvpiGtM7M\n‚îî Bitcoin: 1DFo9TYjyKT7Rwa1Nx7G3STMRHBFUC2hUB\n\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/{me["username"]}?start={message.from_id}\n–ú–∞–Ω—É–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n<a href="https://telegra.ph/Kak-polzovatsya-botom-NFT-OpenSea-06-18">–ü–µ—Ä–≤—ã–π –º–∞–Ω—É–∞–ª</a>\n<a href="https://telegra.ph/Manual-po-vorku-NFT-skama-06-18">–í—Ç–æ—Ä–æ–π –º–∞–Ω—É–∞–ª</a>', reply_markup=get_worker_menu())

@dp.callback_query_handler(text='my_mamonts')
async def my_mamonts(call: types.CallbackQuery):
    mamonts = get_mamonts(call.from_user.id)
    if len(mamonts) == 0:
        await call.answer('‚ùå–£ –≤–∞—Å –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤')
    else:
        await bot.send_message(call.from_user.id, '–í–∞—à–∏ –º–∞–º–æ–Ω—Ç—ã:', reply_markup=get_mamonts_menu(mamonts))

@dp.message_handler(commands=['sendforworkers'])
async def worker(message: types.Message):
    successfulsent=0
    text = message.text[16:]
    workers = get_workers()
    for worker in workers:
        try:
            await bot.send_message(worker['tg_id'], f'{text}')
            successfulsent=successfulsent+1
        except:
            pass
    await bot.send_message(message.from_user.id, f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successfulsent}')

@dp.message_handler(commands=['sendforall'])
async def user(message: types.Message):
    successfulsent=0
    users = get_users()
    text = message.text[12:]
    for user in users:
        try:
            await bot.send_message(user['tg_id'], f'{text}')
            successfulsent=successfulsent+1
        except:
            pass
    await bot.send_message(message.from_user.id, f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successfulsent}')

@dp.callback_query_handler(text_startswith='setting:')
async def mamont_setting(call: types.CallbackQuery):
    mamont_id = call.data.split(':')[1]
    user = get_user(mamont_id, '')
    await bot.send_message(call.from_user.id, f'üêò –ú–∞–º–æ–Ω—Ç: @{user["username"]}\nüÜî: {user["tg_id"]}\nüè¶ –ë–∞–ª–∞–Ω—Å: {user["balance"]}‚ÇΩ\nüí∞ –ú–æ–∂–µ—Ç –ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å: {"‚úÖ" if user["can_withdraw"] else "‚ùå"}\nüë®‚Äçüíª –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {"‚úÖ" if user["is_verif"] else "‚ùå"}', reply_markup=setting_mamont_menu(mamont_id))

@dp.callback_query_handler(text_startswith='set:')
async def set_mamont_setting(call:types.CallbackQuery, state:FSMContext):
    _, setting, mamont_id = call.data.split(':')
    async with state.proxy() as data:
            data['mamont_id'] = mamont_id
    if setting == 'balance':
        await StorageBalanceMamont.value.set()
        await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    elif setting == 'vivod':
        user = get_user(mamont_id, '')
        if user['can_withdraw']:
            set_mamont_vivod(mamont_id, 0)
        else:
            set_mamont_vivod(mamont_id, 1)
    elif setting == 'delete':
        del_mamont_db(mamont_id)
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f'–£–¥–∞–ª–∏–ª')
        return
    elif setting == 'verif':
        user = get_user(mamont_id, '')
        if user['is_verif']:
            set_mamont_verif(mamont_id, 0)
        else:
            set_mamont_verif(mamont_id, 1)
        user = get_user(mamont_id, '')
    else:
        pass
    user = get_user(mamont_id, '')
    await call.message.answer(f'üêò –ú–∞–º–æ–Ω—Ç: @{user["username"]}\nüÜî: {user["tg_id"]}\nüè¶ –ë–∞–ª–∞–Ω—Å: {user["balance"]}‚ÇΩ\nüí∞ –ú–æ–∂–µ—Ç –ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å: {"‚úÖ" if user["can_withdraw"] else "‚ùå"}\nüë®‚Äçüíª –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {"‚úÖ" if user["is_verif"] else "‚ùå"}', reply_markup=setting_mamont_menu(data['mamont_id']))

@dp.message_handler(state=StorageBalanceMamont.value)
async def set_mamont_balance(message: types.Message, state:FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            set_mamont_balance_db(data['mamont_id'], message.text)
            user = get_user(data['mamont_id'], '')
        await message.answer(f'üêò –ú–∞–º–æ–Ω—Ç: @{user["username"]}\nüÜî: {user["tg_id"]}\nüè¶ –ë–∞–ª–∞–Ω—Å: {user["balance"]}‚ÇΩ\nüí∞ –ú–æ–∂–µ—Ç –ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å: {"‚úÖ" if user["can_withdraw"] else "‚ùå"}\nüë®‚Äçüíª –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {"‚úÖ" if user["is_verif"] else "‚ùå"}', reply_markup=setting_mamont_menu(data['mamont_id']))
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞')
    await state.finish()

@dp.callback_query_handler(text='add_mamonts')
async def add_mamonts(call:types.CallbackQuery):
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ user_id –º–∞–º–æ–Ω—Ç–∞:')
    await StorageAddMamonts.mamont.set()

@dp.message_handler(state=StorageAddMamonts.mamont)
async def add_mamont_id(message:types.Message, state:FSMContext):
    await state.finish()
    if message.text.isdigit():
        if add_mamont_db(message.from_id, message.text):
            await message.answer('–ú–∞–º–æ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
        else:
            await message.answer('–ú–∞–º–æ–Ω—Ç —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á—å–∏–º-—Ç–æ')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π user_id')

@dp.callback_query_handler(text='create_promo')
async def create_promo(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞:')
    await StorageCreatePromo.price.set()

@dp.message_handler(state=StorageCreatePromo.price)
async def create_promo_price(message: types.Message, state:FSMContext):
    await state.finish()
    if message.text.isdigit():
        await message.answer(f'‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:\n‚îú –ü—Ä–æ–º–æ: {create_promo_db(message.from_id, message.text)}\n‚îî –°—É–º–º–∞: {message.text}‚ÇΩ')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ')

@dp.callback_query_handler(text='my_promo')
async def my_promo(call: types.CallbackQuery):
    promocodes = get_promocodes(call.from_user.id)
    if len(promocodes) == 0:
        await call.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')
    else:
        text = '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n\n'
        for promo in promocodes:
            if promo['is_used'] == 0:
                text += f'{promo["cod"]} - {promo["value"]}\n'
        await bot.send_message(call.from_user.id, text)
